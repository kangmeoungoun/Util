Referrer Policy:웹에서 돌아다닐때, 이전방문 페이지에 대 정책
  - unsafe-url : referer의 기본 값은 'unsafe-url' 이다. 
                 https://hi098123.tistory.com/152 에서 https://www.google.com 으로 갈때 
                 https://hi098123.tistory.com/152 를 google.com으로 전송한다.
  - origin     : 도메인만 전송한다.
                 https://hi098123.tistory.com/152 에서 https://www.google.com 으로 갈때
                 https://hi098123.tistory.com/  를 google.com으로 전송한다.
  - strict-origin : 대상 주소가 https일때만 도메인만 전송한다.
                    https://hi098123.tistory.com/152 에서 https://www.google.com 으로 갈때
                    https://hi098123.tistory.com/ 를 google.com으로 전송한다
                    https://hi098123.tistory.com/152 에서 http://www.google.com 으로 갈때
                    Referrer값은 google.com으로 전송하지 않는다.
 - no-referrer-when-downgrade : (HTTPS) 지원을 하지 않는 출처에 대해서는 Referer 헤더를 전송하지 않습니다.
 - same-origin   :  대상 주소가 같을때만 전송한다.
                    https://hi098123.tistory.com/152 에서 https://hi098123.tistory.com/45 으로 갈때
                    https://hi098123.tistory.com/152 를 hi098123.tistory.com으로 전송한다
                    https://hi098123.tistory.com/152 에서 https://www.google.com 으로 갈때
                    Referrer값은 google.com으로 전송하지 않는다.
 - origin-when-cross-origin : 대상 주소에 따라 전송한다.
                              https://hi098123.tistory.com/152 에서 https://hi098123.tistory.com/45 으로 갈때
                              https://hi098123.tistory.com/152 를 hi098123.tistory.com으로 전송한다
                              https://hi098123.tistory.com/152 에서 https://www.google.com 으로 갈때
                              https://hi098123.tistory.com/를  google.com으로 전송한다.
 - strict-origin-when-cross-origin : 대상 주소와 https여부에 따라 전송한다.
                                     https://hi098123.tistory.com/152 에서 https://hi098123.tistory.com/45 으로 갈때
                                     https://hi098123.tistory.com/152 를 hi098123.tistory.com으로 전송한다
                                     https://hi098123.tistory.com/152 에서 https://www.google.com 으로 갈때
                                     https://hi098123.tistory.com/를  google.com으로 전송한다.
                                     https://hi098123.tistory.com/152 에서 http://www.google.com 으로 갈때
                                     Referrer값은 google.com으로 전송하지 않는다.


브라우저 캐시의 필요성 : 브라우저 캐시는 클라이언트 시스템에 있는 디스크 또는 메모리를 이용하기 때문에 클라이언트 캐시 라고도 합니다.
                       한 번 접속했던 웹 사이트들의 내용을 사용자의 메모리 또는 디스크의 캐시 디렉토리에 일시적으로 저장해 놓았다가 또 다시 같은 사이트 에
                       접속하게 되면 캐시된 문서와 사이트에 위치한 문서를 서로 비교하여 웹 페이지의 내용이 바뀌었을 경우에만 사이트로 직접 가서 내용을 읽어 오고,
                       바뀌지 않았을 경우에는 캐시된 문서를 읽어서 보여주게 된다.
브라우저 캐시의 종류  : 메모리 캐시와 디스크 캐시가 있다. 메모리 캐시는 주기억 장치인 램의 일정 영역을 브라우저의 캐시 기능으로 할당하는 것 이고 브라우저를 종료함과 동시에 자동
                      적으로 지워지게 된다. 디스크 캐시는 보조기억 장치인 사용자의 하드디스크 드라이브 일정영역에 저장한다. 브라우저를 종료한 후에도 캐시의 내용을 계속 저장하고 있다.
cache-control 을 이해하기 위한 빌드업                      
cache-control : 웹 컨텐츠 캐시 정책을 컨트롤하는 것
 - max-age = n: 초 단위로 캐시 신선도를 설정한다. 그 이후엔 서버에 요청한 뒤 304 응답을 받을 때에만 캐시를 이용한다.
 - no-store : 어떤 요청도 캐시로 저장하지 않는다.
 - no-cache : 캐시가 유효한지 확인하기 위해 매번 서버에 요청한다.
 - must-revalidate : 만료된 캐시만서버에 확인을 받도록 한는것 ?? 정확히 이해를 못했음 no-cache 와의 차이점 을 정확히 모르겠음
 - Expires : 초 단위의 시간 대신 실제 만료 날짜를 명시한다.
 - public : 어떤 요청에 대해서든 캐시를 저장한다.
 - private : 타인과 공유되는 프록시 서버에는 캐시를 저장하지 않는다. 최종 사용자의 클라이언트에만 캐시를 저장한다.
 - Pragma:no-cache  : no-cache 와 같다  하지만 Pragma는 HTTP/1.0 헤더입니다. 1.0을 고려하지 않는다면 생략가능
 - 
